/**
 * 
 */
package org.iringtools.services;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.iringtools.mapping.ClassesList;
import org.iringtools.mapping.CommodityList;
import org.iringtools.mapping.CommodityTipList;
import org.iringtools.mapping.PatternsList;
import org.iringtools.mapping.Role;
import org.iringtools.mapping.RoleList;
import org.iringtools.mapping.TemplateMapList;
import org.iringtools.mapping.TipsList;
import org.iringtools.services.core.TipProvider;

/**
 * @author vmallire
 * 
 */
@Path("/")
@Produces("application/xml")
public class TipsService extends AbstractService
{

  private static final Logger logger = Logger.getLogger(AbstractService.class);
  private final String SERVICE_NAME = "TipService";
  private TemplateMapList tmt;
  private PatternsList pl;
  private CommodityList coml;
  private CommodityTipList comTipl;
  private RoleList rl;
  private TipsList tipl;
  private Role r;
  private ClassesList cl;

  
  @GET
  @Path("/commodityTip")
  public Response getCommodityTip()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      comTipl = TipProvider.getCommodityTip();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(comTipl).build();
  }
  
  @GET
  @Path("/tips")
  public Response getTips()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      tipl = TipProvider.getTips();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(tipl).build();
  }
  
  @GET
  @Path("/commodity")
  public Response getCommodity()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      coml = TipProvider.getCommodity();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(coml).build();
  }
  
  
  @GET
  @Path("/templates")
  public Response getPattern()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      tmt = TipProvider.getTemplate(); // getPattern();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(tmt).build();
  }

  @GET
  @Path("/roles")
  public Response getRoles()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      rl = TipProvider.getRole();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(rl).build();
  }

  @GET
  @Path("/classes")
  public Response getClasses()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      cl = TipProvider.getClasses();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(cl).build();
  }
  

  @GET
  @Path("/patterns")
  public Response getPatterns()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      pl = TipProvider. getPattern();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(pl).build();
  }

  @GET
  @Path("/testtip")
  public Response getTests()
  {

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      // tms =TipProvider.getTest();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(tmt).build();
  }

}
