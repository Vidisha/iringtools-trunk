/**
 * 
 */
package org.iringtools.services;

import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.iringtools.mapping.RoleMaps;
import org.iringtools.mapping.TemplateMaps;
import org.iringtools.services.core.TipProvider;

/**
 * @author vmallire
 * 
 */
@Path("/")
@Produces("application/xml")
public class TipsService extends AbstractService
{

  private static final Logger logger = Logger.getLogger(AbstractService.class);
  private final String SERVICE_NAME = "TipService";
  private TemplateMaps tms;
  private RoleMaps rms;

  @GET
  @Path("/templates")
  public Response getPattern()
  { 

    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      tms = TipProvider.getPattern();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(tms).build();
  }
  
  @GET
  @Path("/roles")
  public Response getRoles()
  { 


    try
    {
      initService(SERVICE_NAME);
    }
    catch (Exception e)
    {
      logger.error("Error initializing ExchangeService: " + e);
      return prepareErrorResponse(HttpServletResponse.SC_UNAUTHORIZED, e);
    }

    try
    {
      TipProvider TipProvider = new TipProvider(settings);
      rms = TipProvider.getRole();

    }
    catch (Exception e)
    {

      return prepareErrorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
    }

    return Response.ok().entity(rms).build();
  }


}
